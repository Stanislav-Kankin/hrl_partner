from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.partners import USERS, save_users

router = Router()


class AdminStates(StatesGroup):
    waiting_for_user_name = State()
    waiting_for_user_last_name = State()
    waiting_for_user_email = State()
    waiting_for_user_phone = State()
    waiting_for_user_partners = State()
    waiting_for_user_role = State()
    waiting_for_edit_user = State()
    waiting_for_delete_user = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
@router.message(Command("admin"))
async def admin_command(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if any(
        user.get("id") == user_id and user.get(
            "email") == "admin" for user in USERS.values()):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üôã‚Äç‚ôÇÔ∏è üôã‚Äç‚ôÄÔ∏è",
                callback_data="add_user")],
            [InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è üëÄ",
                callback_data="add_observer")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            [InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå ",
                callback_data="delete_user")],
            [InlineKeyboardButton(
                text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üóÇÔ∏è",
                callback_data="list_users")]
        ])

        await message.answer(
            "üöÄ  –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "add_user")
async def add_user_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><u>–∏–º—è</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
    await state.set_state(AdminStates.waiting_for_user_name)
    await callback.answer()


@router.message(AdminStates.waiting_for_user_name)
async def process_user_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b><u>—Ñ–∞–º–∏–ª–∏—é</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_last_name)


@router.message(AdminStates.waiting_for_user_last_name)
async def process_user_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><u>—Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
    await state.set_state(AdminStates.waiting_for_user_email)


@router.message(AdminStates.waiting_for_user_email)
async def process_user_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><u>—Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
    await state.set_state(AdminStates.waiting_for_user_phone)


@router.message(AdminStates.waiting_for_user_phone)
async def process_user_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    user_data = await state.get_data()
    user_role = user_data.get("role", "partner")  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å

    if user_role == "observer":
        # –ï—Å–ª–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–ø–∞–Ω–∏–π
        await process_user_partners_observer(message, state)
    else:
        # –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b><u>—Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤</u></b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AdminStates.waiting_for_user_partners)


@router.message(AdminStates.waiting_for_user_partners)
async def process_user_partners(message: Message, state: FSMContext):
    user_data = await state.get_data()
    role = user_data.get("role", "partner")  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
    partners = [partner.strip() for partner in message.text.split(",")] if role == "partner" else []  # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
    full_name = f"{user_data['name']} {user_data['last_name']}"
    USERS[full_name] = {
        "name": user_data['name'],
        "last_name": user_data['last_name'],
        "email": user_data['email'],
        "phone_num": user_data['phone'],
        "allowed_partners": partners,
        "role": role  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
    }
    save_users()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()


@router.callback_query(F.data == "list_users")
async def list_users_callback(callback: CallbackQuery):
    users_info = []
    for full_name, user_data in USERS.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = (
            f"üë§ <b>{full_name}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data.get('phone_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
            f"üìß –ü–æ—á—Ç–∞: <code>{user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</code>\n"
            f"üîó –†–æ–ª—å: <b><u>{user_data.get('role', 'partner')}</u></b>\n"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª—å
        )
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–∞—Ä—Ç–Ω—ë—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
        if user_data.get("role") == "partner":
            user_info += f"üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã: {', '.join(user_data.get('allowed_partners', []))}\n"
        users_info.append(user_info)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if users_info:
        response = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n" + "\n".join(users_info)
    else:
        response = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await callback.message.answer(response, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "delete_user")
async def delete_user_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_delete_user)
    await callback.answer()


@router.message(AdminStates.waiting_for_delete_user)
async def process_delete_user(message: Message, state: FSMContext):
    user_name = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_name in USERS:
        del USERS[user_name]
        save_users()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()


@router.callback_query(F.data == "add_observer")
async def add_observer_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ <b><u>–∏–º—è</u></b> –Ω–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_name)
    await state.update_data(role="observer")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
    await callback.answer()


async def process_user_partners_observer(message: Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = f"{user_data['name']} {user_data['last_name']}"
    USERS[full_name] = {
        "name": user_data['name'],
        "last_name": user_data['last_name'],
        "email": user_data['email'],
        "phone_num": user_data['phone'],
        "allowed_partners": [],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        "role": "observer"      # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
    }
    save_users()
    await message.answer(f"–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
