from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.partners import USERS, save_users
import re
import logging

router = Router()
logger = logging.getLogger(__name__)


class AdminStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_user_name = State()
    waiting_for_user_last_name = State()
    waiting_for_user_email = State()
    waiting_for_user_phone = State()
    waiting_for_user_partners = State()
    waiting_for_user_role = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_edit_name = State()
    waiting_for_edit_last_name = State()
    waiting_for_edit_email = State()
    waiting_for_edit_phone = State()
    waiting_for_edit_role = State()
    waiting_for_edit_partners = State()

    waiting_for_delete_user = State()
    waiting_for_search_query = State()
    waiting_for_change_role = State()


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
def log_admin_action(user_id: int, action: str, details: str = ""):
    logger.info(
        f"Admin {user_id} performed action: {action}. Details: {details}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email
def is_valid_email(email: str) -> bool:
    return bool(
        re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone: str) -> bool:
    return bool(re.match(r'^\+?[0-9\s\-()]{10,}$', phone))


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
@router.message(Command("admin"))
async def admin_command(message: Message):
    user_id = message.from_user.id
    if any(
        user.get(
            "id") == user_id and user.get(
                "email") == "admin" for user in USERS.values()):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data="add_user")],
            [InlineKeyboardButton(
                text="üëÄ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è",
                callback_data="add_observer")],
            [InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data="search_user")],
            [InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                callback_data="list_users")],
        ])
        await message.answer(
            "üöÄ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "add_user")
async def add_user_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><u>–∏–º—è</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
    await state.set_state(AdminStates.waiting_for_user_name)
    await state.update_data(role="partner")
    await callback.answer()


@router.callback_query(F.data == "add_observer")
async def add_observer_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><u>–∏–º—è</u></b> –Ω–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è:"
        )
    await state.set_state(AdminStates.waiting_for_user_name)
    await state.update_data(role="observer")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AdminStates.waiting_for_user_name)
async def process_user_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b><u>—Ñ–∞–º–∏–ª–∏—é</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_last_name)


@router.message(AdminStates.waiting_for_user_last_name)
async def process_user_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><u>—Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
    await state.set_state(AdminStates.waiting_for_user_email)


@router.message(AdminStates.waiting_for_user_email)
async def process_user_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if not is_valid_email(email):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(email=email)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b><u>—Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω</u></b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_phone)


@router.message(AdminStates.waiting_for_user_phone)
async def process_user_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not is_valid_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(phone=phone)
    user_data = await state.get_data()
    user_role = user_data.get("role", "partner")

    if user_role == "observer":
        await process_user_partners_observer(message, state)
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ <b><u>—Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤</u></b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AdminStates.waiting_for_user_partners)


@router.message(AdminStates.waiting_for_user_partners)
async def process_user_partners(message: Message, state: FSMContext):
    user_data = await state.get_data()
    role = user_data.get("role", "partner")
    partners = [
        partner.strip() for partner in message.text.split(
            ","
            )] if role == "partner" else []
    full_name = f"{user_data['name']} {user_data['last_name']}"
    USERS[full_name] = {
        "name": user_data['name'],
        "last_name": user_data['last_name'],
        "email": user_data['email'],
        "phone_num": user_data['phone'],
        "allowed_partners": partners,
        "role": role
    }
    save_users()
    log_admin_action(
        message.from_user.id,
        "add_user",
        f"Added user: {full_name}")
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()


async def process_user_partners_observer(message: Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = f"{user_data['name']} {user_data['last_name']}"
    USERS[full_name] = {
        "name": user_data['name'],
        "last_name": user_data['last_name'],
        "email": user_data['email'],
        "phone_num": user_data['phone'],
        "allowed_partners": [],
        "role": "observer"
    }
    save_users()
    log_admin_action(
        message.from_user.id,
        "add_observer",
        f"Added observer: {full_name}")
    await message.answer(f"‚úÖ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()


@router.callback_query(F.data == "list_users")
async def list_users_callback(callback: CallbackQuery):
    if not USERS:
        await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{name}",
            callback_data=f"user_info_{name}")]
        for name in USERS.keys()
    ])
    await callback.message.answer(
        "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("user_info_"))
async def show_user_info(callback: CallbackQuery):
    user_name = callback.data.replace("user_info_", "")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_data = USERS[user_name]
    user_info = (
        f"üë§ <b>{user_name}</b>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data.get('phone_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"üìß –ü–æ—á—Ç–∞: <code>{user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</code>\n"
        f"üîó –†–æ–ª—å: <b><u>{user_data.get('role', 'partner')}</u></b>\n"
    )
    if user_data.get("role") == "partner":
        user_info += f"üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã: {
            ', '.join(user_data.get('allowed_partners', []))}\n"

    action_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"edit_user_{user_name}")],
        [InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_user_{user_name}")],
        [InlineKeyboardButton(
            text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
            callback_data=f"change_role_{user_name}")],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="list_users")],
    ])

    await callback.message.edit_text(
        f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n{user_info}",
        reply_markup=action_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_user_"))
async def edit_user_callback(callback: CallbackQuery, state: FSMContext):
    user_name = callback.data.replace("edit_user_", "")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await state.update_data(editing_user=user_name)
    user_data = USERS[user_name]
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'role'
    role = user_data.get('role', 'partner')  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'partner'
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="edit_skip_name")]
    ])
    await callback.message.answer(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}</b>\n\n"
        f"üìå –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –ò–º—è: {user_data['name']}\n"
        f"üë§ –§–∞–º–∏–ª–∏—è: {user_data['last_name']}\n"
        f"üìß Email: {user_data['email']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_num']}\n"
        f"üîó –†–æ–ª—å: {role}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é role
        f"üîó –ü–∞—Ä—Ç–Ω–µ—Ä—ã: {', '.join(user_data.get('allowed_partners', []))}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –∏–º—è</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_name)


@router.callback_query(F.data == "edit_skip_name")
async def edit_skip_name(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_data = USERS[user_name]
    await state.update_data(new_name=user_data["name"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data="edit_skip_last_name")]
    ])

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_last_name)


@router.message(AdminStates.waiting_for_edit_name)
async def process_edit_name(message: Message, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    new_name = message.text.strip()
    if new_name:
        await state.update_data(new_name=new_name)
    else:
        user_data = USERS[user_name]
        await state.update_data(new_name=user_data["name"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data="edit_skip_last_name")]
    ])

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_last_name)


@router.callback_query(F.data == "edit_skip_last_name")
async def edit_skip_last_name(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_data = USERS[user_name]
    await state.update_data(new_last_name=user_data["last_name"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="edit_skip_email")]
    ])

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π email</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_email)


@router.message(AdminStates.waiting_for_edit_last_name)
async def process_edit_last_name(message: Message, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    new_last_name = message.text.strip()
    if new_last_name:
        await state.update_data(new_last_name=new_last_name)
    else:
        user_data = USERS[user_name]
        await state.update_data(new_last_name=user_data["last_name"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="edit_skip_email")]
    ])

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π email</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_email)


@router.callback_query(F.data == "edit_skip_email")
async def edit_skip_email(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_data = USERS[user_name]
    await state.update_data(new_email=user_data["email"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data="edit_skip_phone")]
    ])

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_phone)


@router.message(AdminStates.waiting_for_edit_email)
async def process_edit_email(message: Message, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    new_email = message.text.strip()
    if new_email and not is_valid_email(new_email):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    if new_email:
        await state.update_data(new_email=new_email)
    else:
        user_data = USERS[user_name]
        await state.update_data(new_email=user_data["email"])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="edit_skip_phone")]
    ])

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_phone)


@router.callback_query(F.data == "edit_skip_phone")
async def edit_skip_phone(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_data = USERS[user_name]
    await state.update_data(new_phone=user_data["phone_num"])

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üë• –ü–∞—Ä—Ç–Ω—ë—Ä",
            callback_data="edit_set_role_partner")],
        [InlineKeyboardButton(
            text="üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å",
            callback_data="edit_set_role_observer")],
    ])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_role)
    await callback.answer()


@router.message(AdminStates.waiting_for_edit_phone)
async def process_edit_phone(message: Message, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    new_phone = message.text.strip()
    if new_phone and not is_valid_phone(new_phone):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    if new_phone:
        await state.update_data(new_phone=new_phone)
    else:
        user_data = USERS[user_name]
        await state.update_data(new_phone=user_data["phone_num"])

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üë• –ü–∞—Ä—Ç–Ω—ë—Ä",
            callback_data="edit_set_role_partner")],
        [InlineKeyboardButton(
            text="üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å",
            callback_data="edit_set_role_observer")],
    ])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_edit_role)


@router.callback_query(F.data.startswith("edit_set_role_"))
async def process_edit_user_role(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await callback.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    role = "partner" if callback.data == "edit_set_role_partner" else "observer"
    await state.update_data(new_role=role)

    if role == "observer":
        # –ï—Å–ª–∏ —Ä–æ–ª—å "–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å", –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await save_edit_user(callback.message, state)
    else:
        # –ï—Å–ª–∏ —Ä–æ–ª—å "–ø–∞—Ä—Ç–Ω—ë—Ä", —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ <b>—Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AdminStates.waiting_for_edit_partners)

    await callback.answer()


@router.message(AdminStates.waiting_for_edit_partners)
async def process_edit_partners(message: Message, state: FSMContext):
    await save_edit_user(message, state)


async def save_edit_user(message: Message, state: FSMContext):
    state_data = await state.get_data()
    user_name = state_data.get("editing_user")
    if user_name not in USERS:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    updated_data = await state.get_data()
    old_user_data = USERS[user_name]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'role' –≤ old_user_data
    old_role = old_user_data.get("role", "partner")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'partner'
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_full_name = f"{updated_data.get('new_name', old_user_data['name'])} {updated_data.get('new_last_name', old_user_data['last_name'])}"
    # –ï—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ
    if new_full_name != user_name:
        USERS[new_full_name] = USERS.pop(user_name)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USERS[new_full_name].update({
        "name": updated_data.get("new_name", old_user_data["name"]),
        "last_name": updated_data.get("new_last_name", old_user_data["last_name"]),
        "email": updated_data.get("new_email", old_user_data["email"]),
        "phone_num": updated_data.get("new_phone", old_user_data["phone_num"]),
        "role": updated_data.get("new_role", old_role),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º old_role
    })
    # –ï—Å–ª–∏ —Ä–æ–ª—å "–ø–∞—Ä—Ç–Ω—ë—Ä", –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
    current_role = updated_data.get("new_role", old_role)
    if current_role == "partner":
        if state_data.get("waiting_for_edit_partners"):
            partners = [partner.strip() for partner in message.text.split(",")]
            USERS[new_full_name]["allowed_partners"] = partners
        else:
            USERS[new_full_name]["allowed_partners"] = old_user_data.get("allowed_partners", [])
    else:
        USERS[new_full_name]["allowed_partners"] = []
    save_users()
    log_admin_action(message.from_user.id, "edit_user", f"Edited user: {new_full_name}")
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_full_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")
    await state.clear()


@router.callback_query(F.data == "search_user")
async def search_user_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminStates.waiting_for_search_query)
    await callback.answer()

@router.message(AdminStates.waiting_for_search_query)
async def process_search_query(message: Message, state: FSMContext):
    query = message.text.strip().lower()
    found_users = []

    for full_name, user_data in USERS.items():
        if (query in full_name.lower() or
            query in user_data.get('email', '').lower() or
            query in user_data.get('phone_num', '').lower()):
            found_users.append((full_name, user_data))

    if found_users:
        for full_name, user_data in found_users:
            user_info = (
                f"üë§ <b>{full_name}</b>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data.get(
                    'phone_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
                f"üìß –ü–æ—á—Ç–∞: <code>{user_data.get(
                    'email', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</code>\n"
                f"üîó –†–æ–ª—å: <b><u>{user_data.get(
                    'role', 'partner')}</u></b>\n"
            )
            if user_data.get("role") == "partner":
                user_info += f"üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã: {', '.join(user_data.get('allowed_partners', []))}\n"

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –¥–ª—è –ö–ê–ñ–î–û–ì–û –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"edit_user_{full_name}"),
                    InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        callback_data=f"delete_user_{full_name}")
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
                        callback_data=f"change_role_{full_name}"),
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="list_users")
                ]
            ])

            await message.answer(
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>\n\n{user_info}",
                reply_markup=action_keyboard,
                parse_mode="HTML"
            )
    else:
        await message.answer(
            f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    await state.clear()


@router.callback_query(F.data.startswith("delete_user_"))
async def delete_user_callback(callback: CallbackQuery):
    user_name = callback.data.replace("delete_user_", "")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"confirm_delete_{user_name}")],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"user_info_{user_name}")],
    ])
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_name}</b>?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_user(callback: CallbackQuery):
    user_name = callback.data.replace("confirm_delete_", "")
    if user_name in USERS:
        del USERS[user_name]
        save_users()
        log_admin_action(
            callback.from_user.id, "delete_user", f"Deleted user: {user_name}")
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await callback.message.edit_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data.startswith("user_info_"))
async def show_user_info_from_search(callback: CallbackQuery):
    user_name = callback.data.replace("user_info_", "")
    if user_name not in USERS:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user_data = USERS[user_name]
    user_info = (
        f"üë§ <b>{user_name}</b>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data.get('phone_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"üìß –ü–æ—á—Ç–∞: <code>{user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</code>\n"
        f"üîó –†–æ–ª—å: <b><u>{user_data.get('role', 'partner')}</u></b>\n"
    )
    if user_data.get("role") == "partner":
        user_info += f"üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã: {
            ', '.join(user_data.get('allowed_partners', []))}\n"

    action_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"edit_user_{user_name}")],
        [InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_user_{user_name}")],
        [InlineKeyboardButton(
            text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
            callback_data=f"change_role_{user_name}")],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
            callback_data="search_user")],
    ])

    await callback.message.edit_text(
        f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n{user_info}",
        reply_markup=action_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()
