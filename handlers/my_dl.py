from aiogram import Router, F
from aiogram.types import (
    Message, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from services.bitrix import BitrixAPI
import os
import logging
from datetime import datetime
import re
from services.partners import USERS
import asyncio

router = Router()
logger = logging.getLogger(__name__)


class MyDealReg(StatesGroup):
    waiting_for_dealreg_number = State()


class TouchStates(StatesGroup):
    waiting_for_touch_deal_id = State()


def is_user_admin(user_id: int) -> bool:
    for user in USERS.values():
        if user.get("id") == user_id:
            user_email = user.get("email", "").lower()
            return user_email == "admin" or "admin" in user_email
    return False


async def get_partner_email_from_dealreg(
        dealreg_info: dict, bitrix: BitrixAPI) -> str:
    contact_id = dealreg_info.get('contactId')
    if not contact_id:
        logger.warning("No contact ID found in DealReg")
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    logger.info(f"Getting contact info for ID: {contact_id}")
    contact_data = await bitrix.get_contact_info(contact_id)
    if not contact_data or not contact_data.get('result'):
        logger.warning(f"No contact data found for ID: {contact_id}")
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    contact_info = contact_data['result']
    logger.info(f"Full contact info: {contact_info}")
    email_list = contact_info.get('EMAIL', [])
    email = email_list[0]['VALUE'] if email_list else None
    if email:
        logger.info(f"Found partner email in contact: {email}")
        return email
    for field_name, field_value in contact_info.items():
        if field_name.startswith('UF_') and field_value and isinstance(field_value, str) and '@' in field_value:
            if re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', field_value):
                logger.info(f"Found partner email in custom field {field_name}: {field_value}")
                return field_value
    logger.warning("No partner email found in contact")
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'


async def check_dealreg_access(user_email: str, dealreg_info: dict, bitrix: BitrixAPI) -> bool:
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_email}")
    if user_email.lower() == "admin":
        logger.info("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω")
        return True
    for user in USERS.values():
        if user.get("email") == user_email and user.get("role") == "observer":
            logger.info(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} ‚Äî –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å")
            return True
    partner_email = await get_partner_email_from_dealreg(dealreg_info, bitrix)
    logger.info(f"Email –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–∑ DealReg: {partner_email}")
    if partner_email == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
        logger.info("Email –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º.")
        created_by_id = dealreg_info.get('createdById')
        if created_by_id:
            created_by_data = await bitrix.get_user(created_by_id)
            if created_by_data and created_by_data.get('result'):
                created_by_email = created_by_data['result'][0].get('EMAIL', '').lower()
                logger.info(f"Email —Å–æ–∑–¥–∞—Ç–µ–ª—è DealReg: {created_by_email}")
                if created_by_email == user_email.lower():
                    logger.info("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å DealReg")
                    return True
        assigned_by_id = dealreg_info.get('assignedById')
        if assigned_by_id:
            assigned_by_data = await bitrix.get_user(assigned_by_id)
            if assigned_by_data and assigned_by_data.get('result'):
                assigned_by_email = assigned_by_data['result'][0].get('EMAIL', '').lower()
                logger.info(f"Email –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ DealReg: {assigned_by_email}")
                if assigned_by_email == user_email.lower():
                    logger.info("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ DealReg")
                    return True
        logger.warning("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º, —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º")
        return False
    access_granted = user_email.lower() == partner_email.lower() if isinstance(partner_email, str) else False
    if access_granted:
        logger.info(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å email –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_email}")
    else:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å email –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_email}")
    return access_granted


@router.message(Command("my_dr"))
async def my_dl_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_email = None
    for user in USERS.values():
        if user.get("id") == user_id:
            user_email = user.get("email")
            break
    if not user_email:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start ‚ö†Ô∏è")
        return
    await state.update_data(user_email=user_email, is_admin=is_user_admin(user_id))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä DealReg:")
    await state.set_state(MyDealReg.waiting_for_dealreg_number)


@router.message(MyDealReg.waiting_for_dealreg_number)
async def process_dealreg_number(message: Message, state: FSMContext):
    temp_message = await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–∂–∏–¥–∞–π—Ç–µ... ‚è≥")
    dealreg_number = message.text.strip()
    state_data = await state.get_data()
    user_email = state_data.get('user_email')
    is_admin = state_data.get('is_admin', False)
    bitrix = BitrixAPI(os.getenv("BITRIX_WEBHOOK"))
    dealreg_data = await bitrix.get_dealreg_by_id(dealreg_number)
    if not dealreg_data or not dealreg_data.get('result'):
        await temp_message.delete()
        await message.answer("DealReg —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")
        await state.clear()
        return
    dealreg_info = dealreg_data['result'].get('item', {})
    if not is_admin:
        has_access = await check_dealreg_access(user_email, dealreg_info, bitrix)
        if not has_access:
            await temp_message.delete()
            partner_email = await get_partner_email_from_dealreg(dealreg_info, bitrix)
            await message.answer(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ DealReg.\n"
                f"üë§ –í–∞—à email: {user_email}\n"
                f"üìß –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä: {partner_email}\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            await state.clear()
            return
    dealreg_id = dealreg_info.get('id')
    dealreg_stage_id = dealreg_info.get('stageId')
    dealreg_previous_stage_id = dealreg_info.get('previousStageId')
    dealreg_company = dealreg_info.get('companyId')
    dealreg_created = dealreg_info.get('createdTime')
    dealreg_modified = dealreg_info.get('updatedTime')
    if dealreg_company:
        company_data = await bitrix.get_company_info(dealreg_company)
        company_name = company_data.get('result', {}).get('TITLE', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if company_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    else:
        company_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    stages = {
        'DT183_37:NEW': '–ù–∞—á–∞–ª–æ',
        'DT183_37:PREPARATION': '–ü—Ä–æ–≥—Ä–µ–≤ –ø–∞—Ä—Ç–Ω—ë—Ä–∞',
        'DT183_37:UC_AAYY8N': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è HRlink',
        'DT183_37:UC_92D1DY': '–ü—Ä–æ–≥—Ä–µ–≤ HRlink',
        'DT183_37:UC_XFDN2C': '–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞',
        'DT183_37:16': '–í—Å—Ç—Ä–µ—á–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å',
        'DT183_37:UC_GDQZQ3': '–ò—Å—Ç–µ–∫–∞–µ—Ç',
        'DT183_37:UC_7O0GZ6': '–ü—Ä–æ–¥–ª—ë–Ω',
        'DT183_37:FAIL': '–ò—Å—Ç—ë–∫(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:1': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:UC_ENAKFX': '–ù–µ—Ç –ø–ª–∞–Ω–æ–≤ –ø–æ –ø–µ—Ä–µ—Ö–æ–¥—É(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:2': '–î—É–±–ª—å(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:3': '–ö–æ–º–ø–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º –ø–∞—Ä—Ç–Ω—ë—Ä–µ(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:6': '–ò–ù–ù –∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:7': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:10': '–ù–µ —Ü–µ–ª–µ–≤–æ–π(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:11': '–ù–µ –õ–ü–†/–ì–ü–†(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:12': '–õ–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å(–ê–†–•–ò–í–ù–´–ô)(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:13': '–û—Ç–ª–æ–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:14': '–ù–î–ó(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:18': '–ù–µ –ø—Ä–æ–¥–∞–ª(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:19': '–í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:20': '–ö–ª–∏–µ–Ω—Ç(–ø—Ä–æ–∏–≥—Ä—ã—à)',
        'DT183_37:SUCCESS': '–£–°–ü–ï–•'
    }
    stage_name = stages.get(dealreg_stage_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    previous_stage_name = stages.get(dealreg_previous_stage_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if dealreg_previous_stage_id else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    responsible_name = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä'
    responsible_email = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    responsible_telegram = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    responsible_position = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    deal_responsible_for_deal_id = dealreg_info.get('ufCrm27_1731395822')
    if deal_responsible_for_deal_id:
        responsible_data = await bitrix.get_user(deal_responsible_for_deal_id)
        if responsible_data and responsible_data.get('result'):
            responsible_info = responsible_data.get('result', [{}])[0]
            responsible_name = f"{responsible_info.get('NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {responsible_info.get('LAST_NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            responsible_email = responsible_info.get('EMAIL', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_telegram = responsible_info.get('UF_USR_1665651064433', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_position = responsible_info.get('WORK_POSITION', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    elif dealreg_info.get('assignedById'):
        responsible_data = await bitrix.get_user(dealreg_info.get('assignedById'))
        if responsible_data and responsible_data.get('result'):
            responsible_info = responsible_data.get('result', [{}])[0]
            responsible_name = f"{responsible_info.get('NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {responsible_info.get('LAST_NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            responsible_email = responsible_info.get('EMAIL', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_telegram = responsible_info.get('UF_USR_1665651064433', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_position = responsible_info.get('WORK_POSITION', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    deal_touches_info = []
    deal_id = dealreg_info.get('parentId2')
    if deal_id:
        deal_touches_data = await bitrix.get_deal_touches(deal_id)
        if deal_touches_data and deal_touches_data.get('result'):
            for touch in deal_touches_data['result']:
                touch_info = f"{touch.get('CREATED')}: {touch.get('COMMENT')}"
                touch_info = re.sub(r'<[^>]+>', '', touch_info)
                touch_info = re.sub(r'\[/?[A-Z]+\]', '', touch_info)
                deal_touches_info.append(touch_info)
    try:
        created_date = datetime.fromisoformat(dealreg_created).strftime('%d.%m.%Y %H:%M') if dealreg_created else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        modified_date = datetime.fromisoformat(dealreg_modified).strftime('%d.%m.%Y %H:%M') if dealreg_modified else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    except (TypeError, ValueError) as e:
        logger.error(f"Error parsing dates: {e}")
        created_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        modified_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    admin_note = "\nüëë <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n" if is_admin else ""
    dealreg_message = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DealReg:</b>\n"
        f"<b>–ù–æ–º–µ—Ä:</b> {dealreg_id}\n"
        f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company_name}\n"
        "\n"
        f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è:</b> <u>{stage_name}</u>\n"
        f"<b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–¥–∏—è:</b> {previous_stage_name}\n"
        "\n"
        f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Å–¥–µ–ª–∫—É:</b> {responsible_name}\n"
        f"ü§ù <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {responsible_position}\n"
        f"üìß <b>Email:</b> <code>{responsible_email}</code>\n"
        f"üìû <b>Telegram:</b> <code>{responsible_telegram}</code>\n"
        "\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_date}\n"
        f"<b>–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> {modified_date}\n"
        f"{admin_note}"
        "\n"
    )
    if deal_touches_info:
        dealreg_message += "\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å—É—â–Ω–æ—Å—Ç–∏ (–°–¥–µ–ª–∫–∞):</b>\n" + "\n".join(deal_touches_info[:5])
    else:
        dealreg_message += "\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å—É—â–Ω–æ—Å—Ç–∏ (–°–¥–µ–ª–∫–∞):</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    keyboard = None
    if deal_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Å–∞–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"show_touches_{deal_id}")]
        ])
    await temp_message.delete()
    await message.answer(dealreg_message, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    await state.clear()


@router.callback_query(F.data.startswith("show_touches_"))
async def show_client_touches(callback: CallbackQuery, state: FSMContext):
    try:
        deal_id = callback.data.replace("show_touches_", "")
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å–∞–Ω–∏—è...")
        bitrix = BitrixAPI(os.getenv("BITRIX_WEBHOOK"))
        touches_data = await bitrix.get_deal_client_touches(deal_id)
        if not touches_data or not touches_data.get('result') or not touches_data['result'].get('items'):
            await callback.message.answer("‚ùå –ö–∞—Å–∞–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        touches = touches_data['result']['items']
        touches_info = []
        for touch in touches:
            touch_text = touch.get('ufCrm45_1663423811', '')
            if not touch_text:
                continue
            touch_text = re.sub(r'<[^>]+>', '', touch_text)
            touch_text = re.sub(r'\[/?[A-Z]+\]', '', touch_text)
            assigned_by_id = touch.get('assignedById')
            user_data = await bitrix.get_user(assigned_by_id)
            responsible_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            responsible_email = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if user_data and user_data.get('result'):
                user_info = user_data['result'][0]
                responsible_name = f"{user_info.get('NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {user_info.get('LAST_NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                responsible_email = user_info.get('EMAIL', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            created_time = touch.get('createdTime', '')
            if created_time:
                try:
                    created_date = datetime.fromisoformat(created_time).strftime('%d.%m.%Y %H:%M')
                    touch_info = (
                        f"üìÖ <b>{created_date}</b>\n"
                        f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}\n"
                        f"üìß Email: <code>{responsible_email}</code>\n"
                        f"<b>–¢–µ–∫—Å—Ç –∫–∞—Å–∞–Ω–∏—è:</b>\n{touch_text}\n"
                    )
                except Exception:
                    touch_info = (
                        f"üìÖ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞\n"
                        f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}\n"
                        f"üìß Email: {responsible_email}\n"
                        f"{touch_text}\n"
                    )
            else:
                touch_info = (
                    f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_name}\n"
                    f"üìß Email: {responsible_email}\n"
                    f"{touch_text}\n"
                )
            touches_info.append(touch_info)
        if touches_info:
            full_message = "üìã <b>–ö–∞—Å–∞–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º:</b>\n\n" + "\n".join(touches_info)
            if len(full_message) > 4096:
                parts = []
                current_part = ""
                for touch in touches_info:
                    if len(current_part) + len(touch) > 4000:
                        parts.append(current_part)
                        current_part = touch
                    else:
                        current_part += touch
                if current_part:
                    parts.append(current_part)
                for i, part in enumerate(parts, 1):
                    part_message = f"üìã <b>–ö–∞—Å–∞–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º (—á–∞—Å—Ç—å {i}):</b>\n\n{part}"
                    await callback.message.answer(part_message, parse_mode=ParseMode.HTML)
                    await asyncio.sleep(0.5)
            else:
                await callback.message.answer(full_message, parse_mode=ParseMode.HTML)
        else:
            await callback.message.answer("‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å–∞–Ω–∏—è—Ö")
    except Exception as e:
        logger.error(f"Error showing touches: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Å–∞–Ω–∏–π")


@router.callback_query(F.data == "load_more_touches")
async def load_more_touches(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
