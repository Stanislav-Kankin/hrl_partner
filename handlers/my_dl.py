from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from services.bitrix import BitrixAPI
import os
import logging
from datetime import datetime
import re
from services.partners import USERS

router = Router()
logger = logging.getLogger(__name__)


class MyDealReg(StatesGroup):
    waiting_for_dealreg_number = State()


@router.message(Command("my_dl"))
async def my_dl_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not any(user.get("id") == user_id for user in USERS.values()):
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start ‚ö†Ô∏è")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä DealReg:")
    await state.set_state(MyDealReg.waiting_for_dealreg_number)


@router.message(MyDealReg.waiting_for_dealreg_number)
async def process_dealreg_number(message: Message, state: FSMContext):
    dealreg_number = message.text
    bitrix = BitrixAPI(os.getenv("BITRIX_WEBHOOK"))

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ DealReg –ø–æ ID
    dealreg_data = await bitrix.get_dealreg_by_id(dealreg_number)

    if not dealreg_data or not dealreg_data.get('result'):
        await message.answer("DealReg —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")
        await state.clear()
        return

    dealreg_info = dealreg_data['result'].get('item', {})
    dealreg_id = dealreg_info.get('id')
    dealreg_stage_id = dealreg_info.get('stageId')  # ID —Å—Ç–∞–¥–∏–∏
    dealreg_previous_stage_id = dealreg_info.get('previousStageId')
    dealreg_company = dealreg_info.get('companyId')
    dealreg_created = dealreg_info.get('createdTime')
    dealreg_modified = dealreg_info.get('updatedTime')
    contact_ids = dealreg_info.get('contactIds', [0])

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ DealReg
    logger.info(f"DealReg Info: {dealreg_info}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    if dealreg_company:
        company_data = await bitrix.get_company_info(dealreg_company)
        company_name = company_data.get('result', {}).get('TITLE', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if company_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    else:
        company_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π
    stages = {
        'DT183_37:NEW': '–ù–∞—á–∞–ª–æ',
        'DT183_37:PREPARATION': '–ü—Ä–æ–≥—Ä–µ–≤ –ø–∞—Ä—Ç–Ω—ë—Ä–∞',
        'DT183_37:UC_AAYY8N': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è HRlink',
        'DT183_37:UC_92D1DY': '–ü—Ä–æ–≥—Ä–µ–≤ HRlink',
        'DT183_37:UC_XFDN2C': '–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞',
        'DT183_37:16': '–í—Å—Ç—Ä–µ—á–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å',
        'DT183_37:UC_GDQZQ3': '–ò—Å—Ç–µ–∫–∞–µ—Ç',
        'DT183_37:UC_7O0GZ6': '–ü—Ä–æ–¥–ª—ë–Ω'
    }

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏
    stage_name = stages.get(dealreg_stage_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    previous_stage_name = stages.get(dealreg_previous_stage_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if dealreg_previous_stage_id else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –∑–∞ —Å–¥–µ–ª–∫—É
    responsible_name = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä'
    responsible_email = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    responsible_telegram = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    responsible_position = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    deal_responsible_for_deal_id = dealreg_info.get('ufCrm27_1731395822')  # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Å–¥–µ–ª–∫—É

    if deal_responsible_for_deal_id:
        # –ï—Å–ª–∏ –µ—Å—Ç—å ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —Å–¥–µ–ª–∫—É, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        responsible_data = await bitrix.get_user(deal_responsible_for_deal_id)
        if responsible_data and responsible_data.get('result'):
            responsible_info = responsible_data.get('result', [{}])[0]
            responsible_name = f"{responsible_info.get('NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {responsible_info.get('LAST_NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            responsible_email = responsible_info.get('EMAIL', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_telegram = responsible_info.get('UF_USR_1665651064433', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_position = responsible_info.get('WORK_POSITION', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    elif dealreg_info.get('assignedById'):
        responsible_data = await bitrix.get_user(dealreg_info.get('assignedById'))
        if responsible_data and responsible_data.get('result'):
            responsible_info = responsible_data.get('result', [{}])[0]
            responsible_name = f"{responsible_info.get('NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {responsible_info.get('LAST_NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            responsible_email = responsible_info.get('EMAIL', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_telegram = responsible_info.get('UF_USR_1665651064433', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            responsible_position = responsible_info.get('WORK_POSITION', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    elif contact_ids:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        for contact_id in contact_ids:
            contact_data = await bitrix.get_contact_info(contact_id)
            if contact_data and contact_data.get('result'):
                responsible_info = contact_data.get('result', {})
                responsible_name = f"{responsible_info.get('NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {responsible_info.get('LAST_NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                responsible_email = responsible_info.get('EMAIL', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                responsible_telegram = responsible_info.get('UF_USR_1665651064433', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                responsible_position = responsible_info.get('WORK_POSITION', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                break

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å–∞–Ω–∏—è—Ö —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏–∑ —Å–¥–µ–ª–∫–∏
    deal_id = dealreg_info.get('parentId2')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º parentId2 –∫–∞–∫ ID —Å–¥–µ–ª–∫–∏
    if deal_id:
        deal_touches_data = await bitrix.get_deal_touches(deal_id)
        deal_touches_info = []
        if deal_touches_data and deal_touches_data.get('result'):
            for touch in deal_touches_data['result']:
                touch_info = f"{touch.get('CREATED')}: {touch.get('COMMENT')}"
                # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
                touch_info = re.sub(r'<[^>]+>', '', touch_info)
                touch_info = re.sub(r'\[/?[A-Z]+\]', '', touch_info)
                deal_touches_info.append(touch_info)
        else:
            logger.error(f"No touches data found for deal ID: {deal_id}")
    else:
        logger.error("Deal ID not found in DealReg data.")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    try:
        created_date = datetime.fromisoformat(dealreg_created).strftime('%d.%m.%Y %H:%M') if dealreg_created else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        modified_date = datetime.fromisoformat(dealreg_modified).strftime('%d.%m.%Y %H:%M') if dealreg_modified else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    except (TypeError, ValueError) as e:
        logger.error(f"Error parsing dates: {e}")
        created_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        modified_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    dealreg_message = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DealReg:</b>\n"
        f"<b>–ù–æ–º–µ—Ä:</b> {dealreg_id}\n"
        f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company_name}\n"
        "\n"
        f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è:</b> <u>{stage_name}</u>\n"
        f"<b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–¥–∏—è:</b> {previous_stage_name}\n"
        "\n"
        f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Å–¥–µ–ª–∫—É:</b> {responsible_name}\n"
        f"ü§ù <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {responsible_position}\n"
        f"üìß <b>Email:</b> <code>{responsible_email}</code>\n"
        f"üìû<b>Telegram:</b> <code>{responsible_telegram}</code>\n"
        "\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_date}\n"
        f"<b>–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> {modified_date}\n"
        "\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å–∞–Ω–∏—è—Ö —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏–∑ —Å–¥–µ–ª–∫–∏
    if deal_touches_info:
        dealreg_message += "\n<b>–ö–∞—Å–∞–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–°–¥–µ–ª–∫–∞):</b>\n" + "\n".join(deal_touches_info)
        print(deal_touches_info)
    else:
        dealreg_message += "\n<b>–ö–∞—Å–∞–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–°–¥–µ–ª–∫–∞):</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    if len(dealreg_message) > max_length:
        messages = [dealreg_message[i:i + max_length] for i in range(0, len(dealreg_message), max_length)]
        for msg in messages:
            await message.answer(msg, parse_mode=ParseMode.HTML)text
    else:
        await message.answer(dealreg_message, parse_mode=ParseMode.HTML)

    await state.clear()
