from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.partners import USERS

router = Router()


class AuthStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_last_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if any(user.get("id") == user_id for user in USERS.values()):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ\n"
            "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ:</b>\n"
            "\n"
            "/dl_partner - <u>–¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ DealReg.</u> üìÑ\n"
            "/my_dl - <u>–¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.</u> üí°"
        )
    else:
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—ë <b>–ò–º—è</b> üë§")
        await state.set_state(AuthStates.waiting_for_name)


@router.message(AuthStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é <b>–§–∞–º–∏–ª–∏—é</b> üë§")
    await state.set_state(AuthStates.waiting_for_last_name)


@router.message(AuthStates.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É <b>—Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É</b> üìß")
    await state.set_state(AuthStates.waiting_for_email)


@router.message(AuthStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Å–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>"
        " <u>–≤ —Ñ–æ—Ä–º–∞—Ç–µ 89111234455</u> üìû"
    )
    await state.set_state(AuthStates.waiting_for_phone)


@router.message(AuthStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    full_name = f"{user_data['name']} {user_data['last_name']}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ USERS
    if full_name in USERS:
        user_info = USERS[full_name]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        if (user_info["email"] == user_data["email"] and
                user_info["phone_num"] == message.text):
            # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã–µ
            USERS[full_name]['id'] = user_id

            await message.answer("‚úÖ<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>‚úÖ")
            await message.answer(
                "/dl_partner - <u>–¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ DealReg</u> üìÑ "
                "/my_dl –¥–ª—è - <u>–∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.</u> üí°"
            )
        else:
            await message.answer(
                "‚ö†Ô∏è<b>–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.</b>‚ö†Ô∏è"
                )
    else:
        await message.answer("‚ö†Ô∏è<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.</b>‚ö†Ô∏è")

    await state.clear()
